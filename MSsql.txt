-- TASKS DIARIAS
Olhar backups de produção
Olhar jobs

-- TASKS SEMANAIS
Olhar backups de produção
Olhar jobs
Teste de restore

-- TASKS MENSAIS


-- UPDATE SUSEP
="update [dbo].[Pessoa] set unidadeid = "&B2&", tipofuncaoid = "&C2&" where pesCPF = '"&A2&"';"

key sql server 2017
TDKQD-PKV44-PJT4N-TCJG2-3YJ6B

key sql server 2019
2C9JR-K3RNG-QD4M4-JQ2HR-8468J

-- máquina jobs cintepol_OLD = cadastradas na máquina local
cmp201dbnode
CMC201DPFDB\MSSQLSERVER01
- > jobs c:/ pacotes dpfdb
jobs ext
CMC201EXTDB\MSSQLSERVER02
cmp203dbnode
cmc201extdb.cintepol.dpf.br

-- Recuperar senha do SA perdida - https://www.sqlshack.com/recover-lost-sa-password/
Abrir o services como administrador e parar a instância
Adicionar o parâmetro -f no startup do sql manager e iniciar a instância
Como administrador, abrir o cmd e executar
	SQLCMD -Slocalhost
Alterar a senha e desbloquear o usuário:
	ALTER LOGIN sa WITH PASSWORD = 'Mdsdticgss01' UNLOCK
	GO
Ou criar outro login de administrador:
	CREATE LOGIN sa2 WITH PASSWORD = 'Mdsdticgss01'
	GO
	ALTER SERVER ROLE sysadmin ADD MEMBER sa2
	GO
No services, reiniciar a instância sem o parâmetro -f
Logar no banco como sa2 e alterar a senha do sa

CREATE LOGIN [mdh\administrator] FROM WINDOWS
GO
ALTER SERVER ROLE sysadmin ADD MEMBER [mdh\administrator]
GO

SQLCMD -Slocalhost -Usa -Q "SELECT * FROM OITM" -o MyOutput.txt

-- Locks
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
go
SELECT [Spid] = session_Id
, ecid
, [Database] = DB_NAME(sp.dbid)
, [User] = nt_username
, [Status] = er.status
, [lock] = sp.blocked
, [Wait] = wait_type
, [Individual Query] = SUBSTRING (qt.text,
er.statement_start_offset/2,
(CASE WHEN er.statement_end_offset = -1
THEN LEN(CONVERT(NVARCHAR(MAX), qt.text)) * 2
ELSE er.statement_end_offset END -
er.statement_start_offset)/2)
,[Parent Query] = qt.text
, Program = program_name
, Hostname
, nt_domain
, start_time
FROM sys.dm_exec_requests er
INNER JOIN sys.sysprocesses sp ON er.session_id = sp.spid
CROSS APPLY sys.dm_exec_sql_text(er.sql_handle)as qt
WHERE session_Id > 50 -- Ignore system spids.
AND session_Id NOT IN (@@SPID) -- Ignore this current statement.
ORDER BY 1, 2

-- ver sessões
select login_time,login_name,host_name,program_name,status from sys.dm_exec_sessions where login_name like 'usr_sisgp';

select
    l.resource_type,
    l.request_mode,
    l.request_status,
    l.request_session_id,
    r.command,
    r.status,
    r.blocking_session_id,
    r.wait_type,
    r.wait_time,
    r.wait_resource,
    request_sql_text = st.text,
    s.program_name,
    most_recent_sql_text = stc.text
from sys.dm_tran_locks l
left join sys.dm_exec_requests r
on l.request_session_id = r.session_id
left join sys.dm_exec_sessions s
on l.request_session_id = s.session_id
left join sys.dm_exec_connections c
on s.session_id = c.session_id
outer apply sys.dm_exec_sql_text(r.sql_handle) st
outer apply sys.dm_exec_sql_text(c.most_recent_sql_handle) stc
where l.resource_database_id = db_id('mdb')
order by request_session_id;

-- ver sessões de um usuário
USE master
GO 
SELECT spid, blocked  AS BlockedBy, loginame  AS LogInName, login_time,
last_batch, status
FROM   sys.sysprocesses
WHERE loginame = 'usr_sisgp' 

-- Matar a sessão
Kill [SPID]

-- Verificar as atividades do banco
sp_whoisactive

-- verificar sessões no banco
SELECT  spid,
        sp.[status],
        loginame [Login],
        hostname, 
        blocked BlkBy,
        sd.name DBName, 
        cmd Command,
        cpu CPUTime,
        physical_io DiskIO,
        last_batch LastBatch,
        [program_name] ProgramName   
FROM master.dbo.sysprocesses sp 
JOIN master.dbo.sysdatabases sd ON sp.dbid = sd.dbid
ORDER BY spid 

--	Query para ver informações dos logins criados no banco de dados
SELECT	name,
		create_date,
		modify_date,
		LOGINPROPERTY(name, 'DaysUntilExpiration') DaysUntilExpiration,
		LOGINPROPERTY(name, 'PasswordLastSetTime') PasswordLastSetTime,
		LOGINPROPERTY(name, 'IsExpired') IsExpired,
		LOGINPROPERTY(name, 'IsMustChange') IsMustChange,*
From sys.sql_logins

-- Criar usuário no banco de dados
USE [master];
CREATE LOGIN [MDS\dayse.silva] FROM WINDOWS WITH DEFAULT_DATABASE=[db_susep_sisrh];
USE [db_susep_sisrh];
CREATE USER [MDS\dayse.silva] FOR LOGIN [MDS\dayse.silva];
ALTER ROLE [db_datareader] ADD MEMBER [MDS\dayse.silva];

-- Grant para execução de procedures (grant implícito de DML do que estiver na procedure - grant de DDL não é possível)
grant execute to usuario; -- assim ele vai executar todas as procedures daquele banco de dados (até as novas)

-- Consulta para retornar as permissões que são dadas a nível de objetos para o usuário
SELECT	STATE_DESC,prmssn.permission_name AS [Permission], sp.type_desc, sp.name, 
		grantor_principal.name AS [Grantor], grantee_principal.name AS [Grantee] 
FROM sys.all_objects AS sp 
	INNER JOIN sys.database_permissions AS prmssn ON prmssn.major_id = sp.object_id AND prmssn.minor_id = 0 AND prmssn.class = 1 
	INNER JOIN sys.database_principals AS grantor_principal ON grantor_principal.principal_id = prmssn.grantor_principal_id 
	INNER JOIN sys.database_principals AS grantee_principal ON grantee_principal.principal_id = prmssn.grantee_principal_id 
WHERE grantee_principal.name = 'USUARIO'

-- visualizar os grants específicos de um usuário
SELECT 
    pr.name AS PrincipalName,
    pr.type_desc AS PrincipalType,
    pr.default_schema_name,
    pe.state_desc AS PermissionState,
    pe.permission_name AS PermissionName,
    o.name AS ObjectName,
    o.type_desc AS ObjectType
FROM 
    sys.database_permissions AS pe
JOIN 
    sys.database_principals AS pr
    ON pe.grantee_principal_id = pr.principal_id
LEFT JOIN 
    sys.objects AS o
    ON pe.major_id = o.object_id
WHERE 
    pr.name = 'nome_do_usuario';
	
-- listar permissões de logins a nível de servidor
SELECT 
    pr.name AS PrincipalName,
    pr.type_desc AS PrincipalType,
    pe.state_desc AS PermissionState,
    pe.permission_name AS PermissionName,
    s.name AS SecuringObjectName
FROM 
    sys.server_permissions AS pe
JOIN 
    sys.server_principals AS pr
    ON pe.grantee_principal_id = pr.principal_id
LEFT JOIN 
    sys.servers AS s
    ON pe.major_id = s.server_id
WHERE 
    pr.name = 'nome_do_login';

--	Consulta para visualizar as Database Roles. Deve executar em cada database separadamente.
SELECT p.name, p.type_desc, pp.name, pp.type_desc, pp.is_fixed_role
FROM sys.database_role_members roles 
	JOIN sys.database_principals p ON roles.member_principal_id = p.principal_id
	JOIN sys.database_principals pp ON roles.role_principal_id = pp.principal_id
ORDER BY 1

-- Script para matar conexão aberta por usuário (deixa o login do banco órfão - apagar na mão)
select loginame, 'kill ' + cast(spid as char(2)),*
from sysprocesses
where loginame = 'USUARIO'

-- Recuperar banco em modo recovery pending
ALTER DATABASE [DBName] SET EMERGENCY;
GO
ALTER DATABASE [DBName] set single_user
GO
DBCC CHECKDB ([DBName], REPAIR_ALLOW_DATA_LOSS) WITH ALL_ERRORMSGS;
GO 
ALTER DATABASE [DBName] set multi_user
GO

-- Verificar uso de memória
SELECT [object_name],
[counter_name],
[cntr_value]
FROM sys.dm_os_performance_counters
WHERE [object_name] LIKE '%Manager%'
AND [counter_name] = 'Page life expectancy'

-- Consulta para verificar os banco de dados em: nome, online, tamanho dos arquivos, recovery model, nível de compatibilidade, último backup, page_verify_option 
SELECT database_id,
 CONVERT(VARCHAR(25), DB.name) AS dbName,
 CONVERT(VARCHAR(10), DATABASEPROPERTYEX(name, 'status')) AS [Status],
 state_desc,
 (SELECT COUNT(1) FROM sys.master_files WHERE DB_NAME(database_id) = DB.name AND type_desc = 'rows') AS DataFiles,
 (SELECT SUM((size*8)/1024) FROM sys.master_files WHERE DB_NAME(database_id) = DB.name AND type_desc = 'rows') AS [Data MB],
 (SELECT COUNT(1) FROM sys.master_files WHERE DB_NAME(database_id) = DB.name AND type_desc = 'log') AS LogFiles,
 (SELECT SUM((size*8)/1024) FROM sys.master_files WHERE DB_NAME(database_id) = DB.name AND type_desc = 'log') AS [Log MB],
 user_access_desc AS [User access],
 recovery_model_desc AS [Recovery model],
 compatibility_level [compatibility level],
 CONVERT(VARCHAR(20), create_date, 103) + ' ' + CONVERT(VARCHAR(20), create_date, 108) AS [Creation date],
 -- last backup
 ISNULL((SELECT TOP 1
 CASE type WHEN 'D' THEN 'Full' WHEN 'I' THEN 'Differential' WHEN 'L' THEN 'Transaction log' END + ' – ' +
 LTRIM(ISNULL(STR(ABS(DATEDIFF(DAY, GETDATE(),backup_finish_date))) + ' days ago', 'NEVER')) + ' – ' +
 CONVERT(VARCHAR(20), backup_start_date, 103) + ' ' + CONVERT(VARCHAR(20), backup_start_date, 108) + ' – ' +
 CONVERT(VARCHAR(20), backup_finish_date, 103) + ' ' + CONVERT(VARCHAR(20), backup_finish_date, 108) +
 ' (' + CAST(DATEDIFF(second, BK.backup_start_date,
 BK.backup_finish_date) AS VARCHAR(4)) + ' '
 + 'seconds)'
 
 FROM msdb..backupset BK WHERE BK.database_name = DB.name ORDER BY backup_set_id DESC),'-') AS [Last backup],
 CASE WHEN is_fulltext_enabled = 1 THEN 'Fulltext enabled' ELSE '' END AS [fulltext],
 CASE WHEN is_auto_close_on = 1 THEN 'autoclose' ELSE '' END AS [autoclose],
 page_verify_option_desc AS [page verify option],
 CASE WHEN is_read_only = 1 THEN 'read only' ELSE '' END AS [read only],
 CASE WHEN is_auto_shrink_on = 1 THEN 'autoshrink' ELSE '' END AS [autoshrink],
 CASE WHEN is_auto_create_stats_on = 1 THEN 'auto create statistics' ELSE '' END AS [auto create statistics],
 CASE WHEN is_auto_update_stats_on = 1 THEN 'auto update statistics' ELSE '' END AS [auto update statistics],
 CASE WHEN is_in_standby = 1 THEN 'standby' ELSE '' END AS [standby],
 CASE WHEN is_cleanly_shutdown = 1 THEN 'cleanly shutdown' ELSE '' END AS [cleanly shutdown]
  FROM sys.databases DB
 ORDER BY dbName, [Last backup] DESC, NAME

-- informações de backup
;WITH backup_cte 
AS (SELECT database_name, 
	   backup_type = CASE type 
			     WHEN 'D' THEN 
				 'Full Backup' 
			     WHEN 'L' THEN 
				 'Transaction Log' 
			     WHEN 'I' THEN 
				 'Differential Backup' 
			     ELSE 
				 'other' 
			 END, 
	   backup_start_date,
	   backup_finish_date,		-- dcf 1
	   backup_size, 
		rownum = ROW_NUMBER() OVER (PARTITION BY database_name, type ORDER BY backup_finish_date DESC) 
	FROM msdb.dbo.backupset (NOLOCK)			
		WHERE (CONVERT(datetime, msdb.dbo.backupset.backup_start_date, 102) >= GETDATE() - 10)) -- last 10 days. It can be modified if necessary 
SELECT @@SERVERNAME AS SQLInstance, 
	database_name AS DatabaseName, 
       backup_type AS BackupType, 
	backup_start_date AS BackupStartDate, 
       backup_finish_date AS BackupFinishDate,
	DATEDIFF(MINUTE,backup_start_date, backup_finish_date) as TotalBackupTimeMinutes, 
	backup_size AS Backupsize, 
	CAST(backup_size/1024/1024 as DECIMAL(10,2)) AS BackupSizeMB 
	,getdate() as collect_date, '4' as script
FROM backup_cte 
GO 

-- Verificar locais de logs do sql server
https://www.mssqltips.com/sqlservertip/2506/identify-location-of-the-sql-server-error-log-file/

-- Listar informações sobre usuário SQL:
select * from sys.sql_logins;

-- Realizar shrink em todos os arquivos físicos (no caso dos logs, pode-se desabilitar o modo full para liberar mais espaço - perde-se redo):
SELECT 
      'USE [' + d.name + N']' + CHAR(13) + CHAR(10) 
    + 'DBCC SHRINKFILE (N''' + mf.name + N''' , 0, TRUNCATEONLY)' 
    + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10) 
FROM 
         sys.master_files mf 
    JOIN sys.databases d 
        ON mf.database_id = d.database_id 
WHERE d.database_id > 4;

-- Reiniciar a IDENTITY (sequence) do SQL Server
DBCC CHECKIDENT ([Pessoa], RESEED, 0);

-- limpar tabelas
select 'delete from ['+table_schema+'].['+table_name+'];' from information_schema.tables where table_type = 'BASE TABLE';

-- listar todos os bancos de dados
USE [master]
GO
select name from sys.databases where name not in ('master','tempdb','model','msdb') order by 1;

-- Listar todas as tabelas de todos os databases
sp_msforeachdb 'select "?" AS db, * from [?].sys.tables'

-- listar o número tabelas por schema
select count(*) from information_schema.tables 
where table_type = 'base table' 

-- listar o número de linhas por tabelas no schema
select sc.name +'.'+ ta.name tablename
 ,sum(pa.rows) rowcnt
 from sys.tables ta
 inner join sys.partitions pa
 on pa.object_id = ta.object_id
 inner join sys.schemas sc
 on ta.schema_id = sc.schema_id
 where ta.is_ms_shipped = 0 and pa.index_id in (1,0)
 group by sc.name,ta.name
 order by sum(pa.rows) desc

-- select do tamanho dos bancos (kbytes)
select sum(a.tamanho) from (
select db.name,getdate() data, sum(size)*8 as tamanho from sys.databases db
inner join sys.master_files
on db.database_id = sys.master_files.database_id
where db.name not in ('master','tempdb','model','msdb')
group by db.name
) as a

select db.name,getdate() data, sum(size)*8 as tamanho from sys.databases db
inner join sys.master_files
on db.database_id = sys.master_files.database_id
where db.name not in ('master','tempdb','model','msdb')
group by db.name

select round(sum(size)*8/1024/1024,2) as tamanho from sys.databases db
inner join sys.master_files
on db.database_id = sys.master_files.database_id
where db.name not in ('master','tempdb','model','msdb');

EXEC sp_spaceused;

EXEC sp_helpdb N'banco';

EXEC sp_databases;

SELECT
    name,
    size,
    size * 8/1024 'Size (MB)',
    max_size
FROM sys.master_files
WHERE DB_NAME(database_id) = 'banco';

SELECT
    name,
    size,
    size * 8/1024 'Size (MB)',
    max_size
FROM sys.database_files;

SELECT
    d.name AS 'Database',
    m.name AS 'File',
    m.size,
    m.size * 8/1024 'Size (MB)',
    SUM(m.size * 8/1024) OVER (PARTITION BY d.name) AS 'Database Total',
    m.max_size
FROM sys.master_files m
INNER JOIN sys.databases d ON
d.database_id = m.database_id;

-- ver tamanho total dos mdf e ldf:
select sum(size) from sys.master_files where file_id=1 and type_desc='ROWS';
select sum(size) from sys.master_files where file_id=2 and type_desc='LOG';


-- ver tamanho e número de registro de todas as tabelas
select
    t.name as entidade,
    p.rows as registros,
    sum(a.total_pages) * 8 /1024 as  espacototalmb,
    sum(a.used_pages) * 8 /1024 as espacousadomb,
    (sum(a.total_pages) - sum(a.used_pages)) * 8 as espaconaousadomb
from
    sys.tables t
inner join
    sys.indexes i on t.object_id = i.object_id
inner join
    sys.partitions p on i.object_id = p.object_id and i.index_id = p.index_id
inner join
    sys.allocation_units a on p.partition_id = a.container_id
left outer join
    sys.schemas s on t.schema_id = s.schema_id
where
    t.name not like 'dt%'
    and t.is_ms_shipped = 0
    and i.object_id > 255
group by
    t.name, s.name, p.rows
order by
    registros desc

-- verificar qual porta do banco está sendo utilizada pelo sql server
DECLARE @TcpPort VARCHAR(5)
        ,@RegKey VARCHAR(100)
IF @@SERVICENAME !='MSSQLSERVER'
    BEGIN
        SET @RegKey = 'SOFTWARE\Microsoft\Microsoft SQL Server\' + @@SERVICENAME + '\MSSQLServer\SuperSocketNetLib\Tcp'
    END
    ELSE
    BEGIN
        SET @RegKey = 'SOFTWARE\MICROSOFT\MSSQLSERVER\MSSQLSERVER\SUPERSOCKETNETLIB\TCP'
    END
EXEC master..xp_regread
    @rootkey = 'HKEY_LOCAL_MACHINE'
    ,@key = @RegKey
    ,@value_name = 'TcpPort'
    ,@value = @TcpPort OUTPUT
SELECT @TcpPort AS PortNumber
        ,@@SERVERNAME AS ServerName
        ,@@SERVICENAME AS ServiceName

-- desabilitar constraints para todas as tabelas (fk):
EXEC sp_msforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT ALL'
ALTER TABLE [TableName] NOCHECK CONSTRAINT ALL;

-- habilitar constraints para todas as tabelas:
EXEC sp_msforeachtable 'ALTER TABLE ? WITH CHECK CHECK CONSTRAINT ALL'
ALTER TABLE [TableName] WITH CHECK CHECK CONSTRAINT ALL;

-- Identificar constraints de uma tabela
EXEC sp_fkeys @pktable_owner = 'dbo', @pktable_name = 'Unidade';

-- Consulta para deletar linhas de todas as tabelas
SELECT
	'delete from ['+TABLE_SCHEMA+'].['+TABLE_NAME+'];'
FROM
  	INFORMATION_SCHEMA.TABLES where TABLE_CATALOG = 'db_susep_sisrh' and TABLE_TYPE = 'BASE TABLE';

select 
'delete from '+ schema_name(t.schema_id) + '.' + t.name + ';'
from sys.tables t
where schema_name(t.schema_id) = 'ProgramaGestao';

-- rename database
USE master;  
GO  
ALTER DATABASE MyTestDatabase SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
GO
ALTER DATABASE MyTestDatabase MODIFY NAME = MyTestDatabaseCopy;
GO  
ALTER DATABASE MyTestDatabaseCopy SET MULTI_USER;
GO

-- backup location

SELECT database_name AS DBName
    ,physical_device_name AS BackupLocation
    ,CASE WHEN [TYPE]='D' THEN 'FULL'
    WHEN [TYPE]='I' THEN 'DIFFERENTIAL'
    WHEN [TYPE]='L' THEN 'LOG'
    WHEN [TYPE]='F' THEN 'FILE / FILEGROUP'
    WHEN [TYPE]='G'  THEN 'DIFFERENTIAL FILE'
    WHEN [TYPE]='P' THEN 'PARTIAL'
    WHEN [TYPE]='Q' THEN 'DIFFERENTIAL PARTIAL'
  END AS BackupType
    ,backup_finish_date AS BackupFinishDate
FROM msdb.dbo.backupset JOIN msdb.dbo.backupmediafamily
ON(backupset.media_set_id=backupmediafamily.media_set_id)
--Where database_name Like 'ION_Data'
ORDER BY backup_finish_date DESC

--	Consulta para conferir o histórico de Backups que foram executados
SELECT	database_name, name,backup_start_date, datediff(mi, backup_start_date, backup_finish_date) [tempo (min)],
		position, server_name, recovery_model, isnull(logical_device_name, ' ') logical_device_name, device_type, 
		type, cast(backup_size/1024/1024 as numeric(15,2)) [Tamanho (MB)]
FROM msdb.dbo.backupset B
	  INNER JOIN msdb.dbo.backupmediafamily BF ON B.media_set_id = BF.media_set_id
where backup_start_date >=  dateadd(hh, -24 ,getdate()  )
--  and type in ('D','I')
order by backup_start_date desc

-- Most Recent Database Backup for Each Database 

SELECT  
   CONVERT(CHAR(100), SERVERPROPERTY('Servername')) AS Server, 
   msdb.dbo.backupset.database_name,  
   MAX(msdb.dbo.backupset.backup_finish_date) AS last_db_backup_date 
FROM   msdb.dbo.backupmediafamily  
   INNER JOIN msdb.dbo.backupset ON msdb.dbo.backupmediafamily.media_set_id = msdb.dbo.backupset.media_set_id  
WHERE  msdb..backupset.type = 'D' 
GROUP BY 
   msdb.dbo.backupset.database_name  
ORDER BY  
   msdb.dbo.backupset.database_name 

------------------------------------------------------------------------------------------- 
--Databases Missing a Data (aka Full) Back-Up Within Past 24 Hours 
------------------------------------------------------------------------------------------- 
--Databases with data backup over 24 hours old 
SELECT 
   CONVERT(CHAR(100), SERVERPROPERTY('Servername')) AS Server, 
   msdb.dbo.backupset.database_name, 
   MAX(msdb.dbo.backupset.backup_finish_date) AS last_db_backup_date, 
   DATEDIFF(hh, MAX(msdb.dbo.backupset.backup_finish_date), GETDATE()) AS [Backup Age (Hours)] 
FROM    msdb.dbo.backupset 
WHERE     msdb.dbo.backupset.type = 'D'  
GROUP BY msdb.dbo.backupset.database_name 
HAVING      (MAX(msdb.dbo.backupset.backup_finish_date) < DATEADD(hh, - 24, GETDATE()))  

UNION  

--Databases without any backup history 
SELECT      
   CONVERT(CHAR(100), SERVERPROPERTY('Servername')) AS Server,  
   master.dbo.sysdatabases.NAME AS database_name,  
   NULL AS [Last Data Backup Date],  
   9999 AS [Backup Age (Hours)]  
FROM 
   master.dbo.sysdatabases LEFT JOIN msdb.dbo.backupset 
       ON master.dbo.sysdatabases.name  = msdb.dbo.backupset.database_name 
WHERE msdb.dbo.backupset.database_name IS NULL AND master.dbo.sysdatabases.name <> 'tempdb' 
ORDER BY  
   msdb.dbo.backupset.database_name 

-- sestão sem bakcup
SELECT      
      S.NAME AS database_name,  
      'Nobackups' AS [Backup Age (Hours)]  
FROM 
   master.dbo.sysdatabases S LEFT JOIN msdb.dbo.backupset B
       ON S.name  = B.database_name 
WHERE B.database_name IS NULL AND S.name <> 'tempdb'
ORDER BY  
   B.database_name

-- importar arquivo SQL usando CMD
C:\Windows\system32>sqlcmd -S SBSBH39\HOM2016 -d Beneficiario -i E:\sbsbh39\Beneficiario.dbo.beneficiario_observacoes.sql -o E:\sbsbh39\Beneficiario.dbo.beneficiario_observacoes.log

-- consulta oficial para tlogs

select case
			when (((count(sdb.name)*60)+6))  >=  SUM(DATEDIFF(minute,mdb.backup_finish_date, GetDate()))
				then 'Backup T-logs: OK.'
				else 'Backup T-logs: FAIL.'
	   end as status_backup_databases
	   from sys.databases sdb inner join msdb.dbo.backupset mdb on mdb.database_name = sdb.name
where sdb.state_desc!='OFFLINE' and sdb.name not in ('MODEL','TEMPDB') and sdb.recovery_model_desc='FULL'
and mdb.type='L' and mdb.backup_finish_date >= DATEADD(minute, -60, GETDATE());


-- consulta oficial para databases

select case
			when count(sdb.name)  >=  SUM(DATEDIFF(day,mdb.backup_finish_date, GetDate()))
				then 'Backup databases: OK.'
				else 'Backup databases: FAIL.'
	   end as status_backup_databases
from sys.databases sdb inner join msdb.dbo.backupset mdb on mdb.database_name = sdb.name
where sdb.state_desc!='OFFLINE' and sdb.name not in ('MODEL','TEMPDB')
and mdb.type='D' and mdb.backup_finish_date >= getdate() -1;		
		
		
-- backup -- http://msdn.microsoft.com/pt-br/library/ms186865.aspx

use [master] - especifica em qual database será executado o script
go
set ansi_nulls on -- quando o set ansi_nulls for on, todas as comparações em relação a um valor nulo serão avaliadas como unknown(desconhecida). caso o set ansi_nulls for off, as comparações de todos os dados em relação a um valor nulo serão avaliadas como true(verdadeiras). https://pedrogalvaojunior.wordpress.com/2011/01/26/conhecendo-a-diretiva-de-comportamento-set-ansi_nulls-no-sql-server/
go  
set quoted_identifier on -- quando set quoted_identifier está on (padrão), todas as cadeias de caracteres delimitadas por aspas duplas são interpretadas como identificadores de objetos. portanto identificadores entre aspas não precisam seguir as regras transact-sql para identificadores. elas podem ser palavras-chave reservadas e incluir caracteres geralmente não permitidos nos identificadores transact-sql. aspas duplas não podem ser usadas para delimitar expressões de cadeias de caracteres literais. aspas simples devem ser usadas para delimitar cadeias de caracteres literais. se aspas simples (') fizerem parte da cadeia de caracteres literal, elas poderão ser representadas por duas aspas duplas ("). set quoted_identifier deve estar on quando palavras-chave reservadas são usadas para nomes de objetos do banco de dados. http://msdn.microsoft.com/pt-br/library/ms174393.aspx
go 
backup database [wss_content] -- especifica qual database será realizado o bakcup
to disk = n'f:\wss_content.bak' -- especifica o local e o nome do arquivo de backup
with  retaindays = 5, -- especifica o número de dias que devem decorrer para que este conjunto de mídias de backup possa ser substituído. se fornecido como uma variável (@days_var), ela deve ser especificada como um inteiro.
noformat, -- especifica que a operação de backup preserva o cabeçalho da mídia e os conjuntos de backup existentes nos volumes de mídia usados para esta operação de backup. esse é o comportamento padrão.
name = n'wss_content-full database backup', -- especifica o nome do backup
init, -- especifica que o arquivo de bkp sobrescreverá o anterior, caso haja.
skip, -- cria o arquivo de bkp se não existir - sem mensagem de erro.
compression, --  habilita compressão do bakcup
norewind, -- especifica que o sql server mantém a fita aberta após a operação de backup. é possível usar essa opção para ajudar a melhorar o desempenho ao executar várias operações de backup em uma fita.
nounload, -- especifica que depois da operação backup a fita permanecerá carregada na unidade de fita.
stats = 10 -- exibe uma mensagem sempre que outra percentage for concluída e é usada para medir o progresso. se percentage for omitido, o sql server exibirá uma mensagem depois da conclusão de cada 10 por cento.
go

-- Verificar Versão do banco e o Service Pack
SELECT
	@@SERVERNAME HostName_Instance,
	SERVERPROPERTY('ProductVersion') as ProductVersion,
	SERVERPROPERTY('ProductLevel') as ProductLevel,
	SERVERPROPERTY('Edition') as Edition
GO

select @@version 
GO 

-- site mágico para saber qual a versão do SQL server (manter sempre atualizado nos services packs)
select @@version; e compare no site abaixo
https://buildnumbers.wordpress.com/sqlserver/

-- Max memory do SQL server (https://www.brentozar.com/blitz/max-memory/)
GB		MB		Recommended	Setting	Command
16		16384	12288		EXEC sys.sp_configure 'max server memory (MB)', '12288'; RECONFIGURE;
32		32768	29491		EXEC sys.sp_configure 'max server memory (MB)', '29491'; RECONFIGURE;
64		65536	58982		EXEC sys.sp_configure 'max server memory (MB)', '58982'; RECONFIGURE;
128		131072	117964		EXEC sys.sp_configure 'max server memory (MB)', '117964'; RECONFIGURE;
256		262144	235929		EXEC sys.sp_configure 'max server memory (MB)', '235929'; RECONFIGURE;
512		524288	471859		EXEC sys.sp_configure 'max server memory (MB)', '471859'; RECONFIGURE;
1024	1048576	943718		EXEC sys.sp_configure 'max server memory (MB)', '943718'; RECONFIGURE;
2048	2097152	1887436		EXEC sys.sp_configure 'max server memory (MB)', '1887436'; RECONFIGURE;
4096	4194304	3774873		EXEC sys.sp_configure 'max server memory (MB)', '3774873'; RECONFIGURE;

-- Estatísticas do banco de dados
SELECT @@SERVERNAME AS SQLInstance, 
name as ConfigurationName, value_in_use as 'State',getdate() as collect_date, '2' as script
FROM sys.configurations (NOLOCK) 
GO 

-- Jobs do sistema
SELECT 
@@SERVERNAME as SQLInstance, 
job.name as JobName 
,job.enabled 
,job.description 
,SUSER_SNAME(job.owner_sid) as JobOwner 
,getdate() as collect_date, '3' as script
FROM msdb.dbo.sysjobs (NOLOCK) as job 
where job.name not in ('syspolicy_purge_history') 
ORDER BY date_created 
GO 

-- informações de uso de cpu
declare @ts_now bigint 
select @ts_now = cpu_ticks / ( cpu_ticks / ms_ticks ) 
from sys.dm_os_sys_info 
select top 1000 
	  @@SERVERNAME as SQLInstance 
	,record_id 
	,EventTime 
	,case 
		when system_cpu_utilization_post_sp2 is not null then 
			system_cpu_utilization_post_sp2 
		else
			system_cpu_utilization_pre_sp2 
	end as system_cpu_utilization 
	,case 
		when sql_cpu_utilization_post_sp2 is not null then			
			sql_cpu_utilization_post_sp2	-- dcf 2		

	else	
		sql_cpu_utilization_pre_sp2							
	end as sql_cpu_utilization 
		, GETDATE() as collect_date, '5' as script
from ( select record.value ('(Record/@id)[1]', 'int' )			as record_id  
	     ,dateadd (ms, -1 * ( @ts_now - [timestamp] ), getdate()) 	 as EventTime
	     ,100 - record.value ('(Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') as system_cpu_utilization_post_sp2
	     ,record.value ('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int') as sql_cpu_utilization_post_sp2
	     ,100 - record.value ('(Record/SchedluerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') as system_cpu_utilization_pre_sp2 
	     ,record.value ('(Record/SchedluerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int') as sql_cpu_utilization_pre_sp2  
	from ( select timestamp
		      ,convert (xml, record) as record 
		from sys.dm_os_ring_buffers
	where ring_buffer_type = 'RING_BUFFER_SCHEDULER_MONITOR'				
		and record like '%<SystemHealth>%' ) as t ) as t 
order by record_id desc; 
GO

-- informações sobre a instância
SELECT TOP 1 
@@SERVERNAME as SQLInstance,								
create_date AS	'InstallDate',	
SERVERPROPERTY('Edition') AS 'SQLServerEdition',												
SERVERPROPERTY('productLevel') AS 'ProductLevel',								
SERVERPROPERTY('ProductUpdateLevel') AS	'productUpdateLevel',			
SERVERPROPERTY('Collation') AS 'Collation', 
SERVERPROPERTY('productversion') AS 'ProductBuildLevel', 
CASE 
WHEN CONVERT(VARCHAR(128), SERVERPROPERTY('productversion')) LIKE '8%' THEN 
	'SQL Server 2000' 
WHEN CONVERT(VARCHAR(128), SERVERPROPERTY('productversion')) LIKE '9%' THEN 
	'SQL Server 2005' 
WHEN CONVERT(VARCHAR(128), SERVERPROPERTY('productversion')) LIKE '10.0%' THEN		
	'SQL Server 2008'			-- dcf 3			
WHEN CONVERT(VARCHAR(128), SERVERPROPERTY('productversion')) LIKE '10.5%' THEN 
    'SQL Server 2008 R2'
WHEN CONVERT(VARCHAR(128), SERVERPROPERTY('productversion')) LIKE '11%' THEN 
    'SQL Server 2012'				
WHEN CONVERT(VARCHAR(128), SERVERPROPERTY('productversion')) LIKE '12%'	THEN
    'SQL Server 2014' 
WHEN CONVERT(VARCHAR(128), SERVERPROPERTY('productversion')) LIKE '13%'	THEN
    'SQL Server 2016'				
WHEN CONVERT(VARCHAR(128), SERVERPROPERTY('productversion')) LIKE '14%' THEN 
    'SQL Server 2017'				
WHEN CONVERT(VARCHAR(128), SERVERPROPERTY('productversion')) LIKE '15%'	THEN
    'SQL Server 2019'
ELSE 
    'unknown' 
END AS 'SQLServerMajorVersion', 
    SERVERPROPERTY('IsClustered') AS 'IsClustered',				
    SERVERPROPERTY('IsHadrEnabled') AS 'IsHadrEnabled',		
ISNULL(SERVERPROPERTY ('IsPolyBaseInstalled'),0) AS IsPolyBaseInstalled, 
    SUBSTRING(@@VERSION,CHARINDEX('Windows',@@VERSION,0),100) AS OSVersion, 
    GETDATE() as collect_date, '6' as script
FROM sys.server_principals (NOLOCK)				
WHERE name = 'NT SERVICE\MSSQLSERVER' 
      OR name = 'NT AUTHORITY\SYSTEM'			
ORDER BY create_date DESC; 
GO 

-- Informações de disco
SELECT @@SERVERNAME AS SQLInstance, 
	tab.[Drive], tab.volume_mount_point AS [VolumeMountPoint], 
	CASE 
		WHEN num_of_reads = 0 THEN 0 
		ELSE (io_stall_read_ms/num_of_reads) 
	END AS [ReadLatency], 
	CASE			
		WHEN num_of_writes = 0 THEN 0
		ELSE (io_stall_write_ms/num_of_writes) 
	END AS [WriteLatency], 
	CASE 
		WHEN (num_of_reads = 0 AND num_of_writes = 0) THEN 0 
		ELSE (io_stall/(num_of_reads + num_of_writes)) 
	END AS [OverallLatency],
	CASE		
		WHEN num_of_reads = 0 THEN 0	
		ELSE (num_of_bytes_read/num_of_reads) 
	END AS [AvgBytesRead],
	CASE		
		WHEN num_of_writes = 0 THEN 0	
		ELSE (num_of_bytes_written/num_of_writes) 
	END AS [AvgBytesWrite],			-- dcf 5
CASE	
	WHEN (num_of_reads = 0 AND num_of_writes = 0) THEN 0
	ELSE ((num_of_bytes_read + num_of_bytes_written)/(num_of_reads + num_of_writes))	
END AS [AvgBytesTransfer], 
getdate() as collect_date, '8' as script
FROM (SELECT LEFT(UPPER(mf.physical_name), 2) AS Drive, SUM(num_of_reads) AS num_of_reads, 
		SUM(io_stall_read_ms) AS io_stall_read_ms, SUM(num_of_writes) AS num_of_writes, 
		SUM(io_stall_write_ms) AS io_stall_write_ms, SUM(num_of_bytes_read) AS num_of_bytes_read, 
		SUM(num_of_bytes_written) AS num_of_bytes_written, SUM(io_stall) AS io_stall, vs.volume_mount_point 
	FROM sys.dm_io_virtual_file_stats(NULL, NULL) AS vfs 
INNER JOIN sys.master_files AS mf WITH (NOLOCK) 
ON vfs.database_id = mf.database_id AND vfs.file_id = mf.file_id 
	CROSS APPLY sys.dm_os_volume_stats(mf.database_id, mf.[file_id]) AS vs 
GROUP BY LEFT(UPPER(mf.physical_name), 2), vs.volume_mount_point) AS tab 
ORDER BY [OverallLatency] OPTION (RECOMPILE);	

-- bkp restore aws rds
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/SQLServer.Procedural.Importing.html

-- Backup (dump) AWS RDS para o S3 bucket
exec msdb.dbo.rds_backup_database
	@source_db_name='DBS_OID',
	@s3_arn_to_backup_to='arn:aws:s3:::sqlservermgi/backups/DBS_OID_teste.bak',
	@type='FULL';

-- consultar o andamento do bkp
EXEC msdb.dbo.rds_task_status;

select top 1
database_name
, 	backup_start_date
, 	backup_finish_date
from    msdb.dbo.backupset
where   database_name='mydatabase'
and     type = 'D'
order by backup_start_date desc;


-- Restore (dump AWS RDS do S3 bucket
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/SQLServer.Procedural.Importing.html
exec msdb.dbo.rds_restore_database
	@restore_db_name='DBS_OID_PRD',
	@s3_arn_to_restore_from='arn:aws:s3:::sqlservermgi/backups/DBS_OID_teste.bak',
	@with_norecovery=0,
	@type='FULL';
	
-- Drop e recreate on AWS
USE [master];
GO
IF EXISTS (SELECT 1 FROM sys.databases WHERE name = 'DBS_OID')
BEGIN
ALTER DATABASE [DBS_OID] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;  
DROP DATABASE [DBS_OID]; END;
GO
EXEC msdb.dbo.rds_restore_database @restore_db_name='DBS_OID', 
@s3_arn_to_restore_from= 'arn:aws:s3:::sqlservermgi/backups/bkp_DBS_OID_23082024.bak'; 
GO
EXEC msdb.dbo.rds_task_status;

-- Arrumar o sql server configuration manager
verificar se existe o diretório
win+R
%programfiles(x86)%\Microsoft SQL Server\140\Shared
e verificar se existe o arquivo sqlmgmproviderxpsp2up.mof
depois abrir cmd como admin
ir até o diretório
%programfiles(x86)%\Microsoft SQL Server\140\Shared
executar 
mofcomp "sqlmgmproviderxpsp2up.mof"
depois abrir o power shell como admin e executar
Get-Service winmgmt | Restart-Service -Force